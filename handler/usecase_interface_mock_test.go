// Code generated by MockGen. DO NOT EDIT.
// Source: handler/usecase_interface.go

// Package handler is a generated GoMock package.
package handler

import (
	context "context"
	reflect "reflect"

	models "github.com/KennyKur/CRUD_Todo/models"
	gomock "github.com/golang/mock/gomock"
)

// MockTodoUsecaseInterface is a mock of TodoUsecaseInterface interface.
type MockTodoUsecaseInterface struct {
	ctrl     *gomock.Controller
	recorder *MockTodoUsecaseInterfaceMockRecorder
}

// MockTodoUsecaseInterfaceMockRecorder is the mock recorder for MockTodoUsecaseInterface.
type MockTodoUsecaseInterfaceMockRecorder struct {
	mock *MockTodoUsecaseInterface
}

// NewMockTodoUsecaseInterface creates a new mock instance.
func NewMockTodoUsecaseInterface(ctrl *gomock.Controller) *MockTodoUsecaseInterface {
	mock := &MockTodoUsecaseInterface{ctrl: ctrl}
	mock.recorder = &MockTodoUsecaseInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTodoUsecaseInterface) EXPECT() *MockTodoUsecaseInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTodoUsecaseInterface) Create(ctx context.Context, todo models.User_todo_list) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, todo)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockTodoUsecaseInterfaceMockRecorder) Create(ctx, todo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTodoUsecaseInterface)(nil).Create), ctx, todo)
}

// Delete mocks base method.
func (m *MockTodoUsecaseInterface) Delete(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTodoUsecaseInterfaceMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTodoUsecaseInterface)(nil).Delete), ctx, id)
}

// Fetch mocks base method.
func (m *MockTodoUsecaseInterface) Fetch(ctx context.Context) ([]models.User_todo_list, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", ctx)
	ret0, _ := ret[0].([]models.User_todo_list)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch.
func (mr *MockTodoUsecaseInterfaceMockRecorder) Fetch(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockTodoUsecaseInterface)(nil).Fetch), ctx)
}

// GetByID mocks base method.
func (m *MockTodoUsecaseInterface) GetByID(ctx context.Context, id int64) (models.User_todo_list, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(models.User_todo_list)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockTodoUsecaseInterfaceMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockTodoUsecaseInterface)(nil).GetByID), ctx, id)
}

// Update mocks base method.
func (m *MockTodoUsecaseInterface) Update(ctx context.Context, todo models.User_todo_list, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, todo, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockTodoUsecaseInterfaceMockRecorder) Update(ctx, todo, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTodoUsecaseInterface)(nil).Update), ctx, todo, id)
}
